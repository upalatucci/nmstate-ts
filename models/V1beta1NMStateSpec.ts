/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * NMStateSpec defines the desired state of NMState
 * @export
 * @interface V1beta1NMStateSpec
 */
export interface V1beta1NMStateSpec {
    /**
     * InfraNodeSelector is an optional selector that will be added to webhook & certmanager Deployment manifests If InfraNodeSelector is specified, the webhook and certmanager will run only on nodes that have each of the indicated key-value pairs as labels applied to the node.
     * @type {{ [key: string]: any; }}
     * @memberof V1beta1NMStateSpec
     */
    infraNodeSelector?: { [key: string]: any; } | null;
    /**
     * InfraTolerations is an optional list of tolerations to be added to webhook & certmanager Deployment manifests If InfraTolerations is specified, the webhook and certmanager will be able to be scheduled on nodes with corresponding taints
     * @type {any}
     * @memberof V1beta1NMStateSpec
     */
    infraTolerations?: any | null;
    /**
     * NodeSelector is an optional selector that will be added to handler DaemonSet manifest for both workers and control-plane (https://github.com/nmstate/kubernetes-nmstate/blob/main/deploy/handler/operator.yaml). If NodeSelector is specified, the handler will run only on nodes that have each of the indicated key-value pairs as labels applied to the node.
     * @type {{ [key: string]: any; }}
     * @memberof V1beta1NMStateSpec
     */
    nodeSelector?: { [key: string]: any; } | null;
    /**
     * Tolerations is an optional list of tolerations to be added to handler DaemonSet manifest If Tolerations is specified, the handler daemonset will be also scheduled on nodes with corresponding taints
     * @type {any}
     * @memberof V1beta1NMStateSpec
     */
    tolerations?: any | null;
}

/**
 * Check if a given object implements the V1beta1NMStateSpec interface.
 */
export function instanceOfV1beta1NMStateSpec(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1beta1NMStateSpecFromJSON(json: any): V1beta1NMStateSpec {
    return V1beta1NMStateSpecFromJSONTyped(json, false);
}

export function V1beta1NMStateSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1beta1NMStateSpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'infraNodeSelector': !exists(json, 'infraNodeSelector') ? undefined : json['infraNodeSelector'],
        'infraTolerations': !exists(json, 'infraTolerations') ? undefined : json['infraTolerations'],
        'nodeSelector': !exists(json, 'nodeSelector') ? undefined : json['nodeSelector'],
        'tolerations': !exists(json, 'tolerations') ? undefined : json['tolerations'],
    };
}

export function V1beta1NMStateSpecToJSON(value?: V1beta1NMStateSpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'infraNodeSelector': value.infraNodeSelector,
        'infraTolerations': value.infraTolerations,
        'nodeSelector': value.nodeSelector,
        'tolerations': value.tolerations,
    };
}

